/*! shopify/graphql-client@0.10.0 -- Copyright (c) 2023-present, Shopify Inc. -- license (MIT): https://github.com/Shopify/shopify-api-js/blob/main/LICENSE.md */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ShopifyGraphQLClient={})}(this,(function(e){"use strict";const t="GraphQL Client",r=0,n=3,s="An error occurred while fetching from the API. Review 'graphQLErrors' for details.",o="Response returned unexpected Content-Type:",a="An unknown error has occurred. The API did not return a data object or any errors in its response.",i={json:"application/json",multipart:"multipart/mixed"},c=1e3,u=[429,503],d=/@(defer)\b/i,l=/boundary="?([^=";]+)"?/i,f="\r\n\r\n";function y(e,r=t){return e.startsWith(`${r}`)?e:`${r}: ${e}`}function h(e){return e instanceof Error?e.message:JSON.stringify(e)}function p(e){return e instanceof Error&&e.cause?e.cause:void 0}function m(e){return e.flatMap((({errors:e})=>e??[]))}function w({client:e,retries:t}){if(void 0!==t&&("number"!=typeof t||t<r||t>n))throw new Error(`${e}: The provided "retries" value (${t}) is invalid - it cannot be less than ${r} or greater than ${n}`)}function g(e,t){return t&&("object"!=typeof t||Array.isArray(t)||"object"==typeof t&&Object.keys(t).length>0)?{[e]:t}:{}}function b(e,t){if(0===e.length)return t;const r={[e.pop()]:t};return 0===e.length?r:b(e,r)}function x(e,t){return Object.keys(t||{}).reduce(((r,n)=>("object"==typeof t[n]||Array.isArray(t[n]))&&e[n]?(r[n]=x(e[n],t[n]),r):(r[n]=t[n],r)),Array.isArray(e)?[...e]:{...e})}function E([e,...t]){return t.reduce(x,{...e})}function S({clientLogger:e,customFetchApi:r=fetch,client:n=t,defaultRetryWaitTime:s=c,retriableCodes:o=u}){const a=async(t,i,c)=>{const u=i+1,d=c+1;let l;try{if(l=await r(...t),e({type:"HTTP-Response",content:{requestParams:t,response:l}}),!l.ok&&o.includes(l.status)&&u<=d)throw new Error;return l}catch(r){if(u<=d){const r=l?.headers.get("Retry-After");return await async function(e){return new Promise((t=>setTimeout(t,e)))}(r?parseInt(r,10):s),e({type:"HTTP-Retry",content:{requestParams:t,lastResponse:l,retryAttempt:i,maxRetries:c}}),a(t,u,c)}throw new Error(y(`${c>0?`Attempted maximum number of ${c} network retries. Last message - `:""}${h(r)}`,n))}};return a}async function A(e){const{errors:t,data:r,extensions:n}=await e.json();return{...g("data",r),...g("extensions",n),...t||!r?{errors:{networkStatusCode:e.status,message:y(t?s:a),...g("graphQLErrors",t),response:e}}:{}}}function T(e){return e.map((e=>{try{return JSON.parse(e)}catch(e){throw new Error(`Error in parsing multipart response - ${h(e)}`)}})).map((e=>{const{data:t,incremental:r,hasNext:n,extensions:s,errors:o}=e;if(!r)return{data:t||{},...g("errors",o),...g("extensions",s),hasNext:n};const a=r.map((({data:e,path:t,errors:r})=>({data:e&&t?b(t,e):{},...g("errors",r)})));return{data:1===a.length?a[0].data:E([...a.map((({data:e})=>e))]),...g("errors",m(a)),hasNext:n}}))}function $(e,t){if(e.length>0)throw new Error(s,{cause:{graphQLErrors:e}});if(0===Object.keys(t).length)throw new Error(a)}e.createGraphQLClient=function({headers:e,url:r,customFetchApi:n=x,retries:s=0,logger:a}){w({client:t,retries:s});const u={headers:e,url:r,retries:s},b=function(e){return t=>{e&&e(t)}}(a),x=function(e,{url:r,headers:n,retries:s}){return async(o,a={})=>{const{variables:i,headers:c,url:u,retries:d}=a,l=JSON.stringify({query:o,variables:i});w({client:t,retries:d});const f=Object.entries({...n,...c}).reduce(((e,[t,r])=>(e[t]=Array.isArray(r)?r.join(", "):r.toString(),e)),{});return e([u??r,{method:"POST",headers:f,body:l}],1,d??s)}}(S({customFetchApi:n,clientLogger:b,defaultRetryWaitTime:c}),u),j=function(e){return async(...t)=>{if(d.test(t[0]))throw new Error(y("This operation will result in a streamable response - use requestStream() instead."));try{const r=await e(...t),{status:n,statusText:s}=r,a=r.headers.get("content-type")||"";return r.ok?a.includes(i.json)?A(r):{errors:{networkStatusCode:n,message:y(`${o} ${a}`),response:r}}:{errors:{networkStatusCode:n,message:y(s),response:r}}}catch(e){return{errors:{message:h(e)}}}}}(x),k=function(e){return async(...t)=>{if(!d.test(t[0]))throw new Error(y("This operation does not result in a streamable response - use request() instead."));try{const r=await e(...t),{statusText:n}=r;if(!r.ok)throw new Error(n,{cause:r});const s=r.headers.get("content-type")||"";switch(!0){case s.includes(i.json):return function(e){return{async*[Symbol.asyncIterator](){const t=await A(e);yield{...t,hasNext:!1}}}}(r);case s.includes(i.multipart):return function(e,t){const r=(t??"").match(l),n=`--${r?r[1]:"-"}`;if(!e.body?.getReader&&!e.body[Symbol.asyncIterator])throw new Error("API multipart response did not return an iterable body",{cause:e});const s=async function*(e){if(e.body[Symbol.asyncIterator])for await(const t of e.body)yield t.toString();else{const t=e.body.getReader(),r=new TextDecoder;let n;try{for(;!(n=await t.read()).done;)yield r.decode(n.value)}finally{t.cancel()}}}(e);let o,a={};return{async*[Symbol.asyncIterator](){try{let e=!0;for await(const t of function(e,t){return{async*[Symbol.asyncIterator](){try{let r="";for await(const n of e)if(r+=n,r.indexOf(t)>-1){const e=r.lastIndexOf(t),n=r.slice(0,e).split(t).filter((e=>e.trim().length>0)).map((e=>e.slice(e.indexOf(f)+f.length).trim()));n.length>0&&(yield n),r=r.slice(e+t.length),"--"===r.trim()&&(r="")}}catch(e){throw new Error(`Error occured while processing stream payload - ${h(e)}`)}}}}(s,n)){const r=T(t);o=r.find((e=>e.extensions))?.extensions??o;const n=m(r);a=E([a,...r.map((({data:e})=>e))]),e=r.slice(-1)[0].hasNext,$(n,a),yield{...g("data",a),...g("extensions",o),hasNext:e}}if(e)throw new Error("Response stream terminated unexpectedly")}catch(t){const r=p(t);yield{...g("data",a),...g("extensions",o),errors:{message:y(h(t)),networkStatusCode:e.status,...g("graphQLErrors",r?.graphQLErrors),response:e},hasNext:!1}}}}}(r,s);default:throw new Error(`${o} ${s}`,{cause:r})}}catch(e){return{async*[Symbol.asyncIterator](){const t=p(e);yield{errors:{message:y(h(e)),...g("networkStatusCode",t?.status),...g("response",t)},hasNext:!1}}}}}}(x);return{config:u,fetch:x,request:j,requestStream:k}}}));
//# sourceMappingURL=graphql-client.min.js.map
